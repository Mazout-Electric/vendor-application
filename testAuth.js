const elliptic = require('elliptic');
const crypto = require('crypto');

// Initialize the elliptic curve
const ec = elliptic.ec('p256');

// Convert public key array to hex string and add the '04' prefix for uncompressed format
const publicKeyArray = [0x9F, 0xE8, 0xB8, 0xFA, 0x1F, 0x60, 0xBC, 0x61, 0x44, 0x7A, 0x57, 0x5E, 0x6B, 0xDA, 0xDE, 0xC9, 0xE7, 0x9B, 0x0E, 0xBF, 0x60, 0xE6, 0x0A, 0x27, 0xA6, 0xBA, 0x9A, 0x1C, 0xAA, 0x60, 0xBE, 0x03, 0x68, 0x13, 0xBC, 0xD3, 0x28, 0x6A, 0x2D, 0x3E, 0x65, 0xC5, 0xF6, 0x61, 0x61, 0x31, 0x1C, 0x4A, 0x1E, 0x57, 0x69, 0x42, 0xF7, 0xEA, 0x8E, 0x46, 0xC2, 0xF3, 0x16, 0xAB, 0xDB, 0x25, 0x0A, 0xC8];
const publicKeyHex = publicKeyArray.map(byte => byte.toString(16).padStart(2, '0')).join('');
const publicKeyHexUncompressed = '04' + publicKeyHex; // Add '04' prefix for uncompressed format

// Convert signature array to hex string
const signatureArray = [0x30, 0x44, 0x02, 0x20, 0x1F, 0xE8, 0x5D, 0xCA, 0x2A, 0x48, 0x89, 0x58, 0x02, 0xE8, 0xD2, 0xF6, 0xB2, 0xB0, 0xB1, 0x1A, 0x5B, 0x3B, 0x55, 0x0D, 0x5F, 0x8B, 0xD4, 0xE4, 0xB0, 0x09, 0x1C, 0x60, 0x02, 0x20, 0x6F, 0x7A, 0x47, 0x5B, 0xD5, 0x1C, 0x8A, 0xCE, 0x6B, 0x7E, 0xC8, 0x2A, 0xD1, 0x6D, 0x1F, 0xB8, 0x1F, 0x68, 0x52, 0xA4, 0x3F, 0x24, 0x7F, 0x6D, 0xDA, 0xE0, 0x4A, 0xA6, 0xBF, 0xC1, 0x44, 0x02, 0x20, 0x6A, 0xA4, 0xA1, 0x76, 0xA1, 0xF2, 0x6F, 0xD4, 0xF4, 0x8C, 0xE5, 0x0A, 0xC5, 0x78, 0x6D, 0x1E, 0xB8, 0xAB, 0x69, 0x48, 0x92, 0x5A, 0x80, 0xA8, 0x3A, 0x2D, 0x06, 0x2C, 0xCA, 0x41, 0xC8, 0xE0, 0xC6, 0x7B, 0xA7, 0x9B];
const signatureHex = signatureArray.map(byte => byte.toString(16).padStart(2, '0')).join('');

// Sample hash of the message (should match what was used to create the signature)
const message = '0123299ecbc32becee';
const hash = crypto.createHash('sha256').update(message).digest('hex');

// Convert hash and signature to buffer
const hashBuffer = Buffer.from(hash, 'hex');
const signatureBuffer = Buffer.from(signatureHex, 'hex');

// Decode the DER-encoded signature to r and s
const parseSignature = (signature) => {
    const rOffset = 4; // Offset to the start of the r value
    const sOffset = rOffset + signature[3] + 2; // Offset to the start of the s value

    const r = signature.slice(rOffset, rOffset + signature[3]);
    const s = signature.slice(sOffset + 2);

    return { r: r.toString('hex'), s: s.toString('hex') };
};

const { r, s } = parseSignature(signatureBuffer);

// Construct the signature object
const signature = {
    r: Buffer.from(r, 'hex'),
    s: Buffer.from(s, 'hex')
};

// Verify the signature
try {
    const key = ec.keyFromPublic(publicKeyHexUncompressed, 'hex');
    const verified = key.verify(hashBuffer, signature);
    console.log('Verified:', verified);
} catch (err) {
    console.error('Verification failed:', err);
}
